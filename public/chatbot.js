document.addEventListener('DOMContentLoaded', function () {
	// –°–ª–æ–≤–∞—Ä—å —Å–∏–Ω–æ–Ω–∏–º–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞
	const synonyms = {
		–±–µ–π—Å–±–æ–ª–∫–∞: ['–±–µ–π—Å–±–æ–ª–∫–∞', '–∫–µ–ø–∫–∞', '–±–µ–π—Å–±–æ–ª–∫–∏', '–∫–µ–ø–∫–∏'],
		—Ñ—É—Ç–±–æ–ª–∫–∞: ['—Ñ—É—Ç–±–æ–ª–∫–∞', '—Ñ—É—Ç–±–æ–ª–∫–∏', '—Ç-—à–æ—Ä—Ç', '—Ç-—à–æ—Ä—Ç—ã'],
	}

	// –≠–ª–µ–º–µ–Ω—Ç—ã —á–∞—Ç-–±–æ—Ç–∞
	const chatBotIcon = document.createElement('div')
	chatBotIcon.className = 'chatbot-icon'
	chatBotIcon.innerHTML = `
        <svg width="36" height="36" viewBox="0 0 36 36" fill="none" xmlns="http://www.w3.org/2000/svg">
            <circle cx="18" cy="18" r="18" fill="#fffb00"/>
            <path d="M12 14C12 12.8954 12.8954 12 14 12H22C23.1046 12 24 12.8954 24 14V18C24 19.1046 23.1046 20 22 20H14C12.8954 20 12 19.1046 12 18V14Z" fill="#1a1a1a"/>
            <circle cx="16" cy="16" r="2" fill="#fffb00"/>
            <circle cx="20" cy="16" r="2" fill="#fffb00"/>
            <path d="M15 22L13 26H23L21 22H15Z" fill="#1a1a1a"/>
        </svg>
    `
	document.body.appendChild(chatBotIcon)

	const chatBotContainer = document.createElement('div')
	chatBotContainer.className = 'chatbot-container'
	chatBotContainer.innerHTML = `
        <div class="chatbot-header">
            <h3>LVShop Assistant</h3>
            <i class="bx bxs-x-circle chatbot-close"></i>
        </div>
        <div class="chatbot-messages" id="chatbot-messages"></div>
        <div class="chatbot-input">
            <input type="text" id="chatbot-input" placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å...">
            <button id="chatbot-send">
                <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path d="M22 2L11 13" stroke="#1a1a1a" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                    <path d="M22 2L15 22L11 13L2 9L22 2Z" stroke="#1a1a1a" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                </svg>
            </button>
        </div>
    `
	document.body.appendChild(chatBotContainer)

	// –í—Å–ø–ª—ã–≤–∞—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
	const popupMessage = document.createElement('div')
	popupMessage.className = 'chatbot-popup'
	popupMessage.innerHTML = `
        <p>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ LVShop! –Ø –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫. –ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å! üòä</p>
    `
	document.body.appendChild(popupMessage)

	const chatMessages = document.getElementById('chatbot-messages')
	const chatInput = document.getElementById('chatbot-input')
	const sendButton = document.getElementById('chatbot-send')
	const closeButton = document.querySelector('.chatbot-close')

	// –°–æ—Å—Ç–æ—è–Ω–∏–µ —á–∞—Ç-–±–æ—Ç–∞
	let currentState = 'greeting'
	let selectedProductId = null
	let orderDetails = {}
	let isPopupActive = true

	// –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∞–Ω–∏–º–∞—Ü–∏—é –∏–∫–æ–Ω–∫–∏
	function showPopup() {
		setTimeout(() => {
			if (isPopupActive) {
				popupMessage.classList.add('active')
				chatBotIcon.classList.add('pulse')
				// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫—Ä—ã—Ç—å —á–µ—Ä–µ–∑ 8 —Å–µ–∫—É–Ω–¥
				setTimeout(hidePopup, 8000)
			}
		}, 1000) // –ó–∞–¥–µ—Ä–∂–∫–∞ 1 —Å–µ–∫—É–Ω–¥–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
	}

	// –°–∫—Ä—ã—Ç—å –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
	function hidePopup() {
		popupMessage.classList.remove('active')
		chatBotIcon.classList.remove('pulse')
		isPopupActive = false
	}

	// –ü–æ–∫–∞–∑–∞—Ç—å/—Å–∫—Ä—ã—Ç—å —á–∞—Ç-–±–æ—Ç
	chatBotIcon.addEventListener('click', () => {
		chatBotContainer.classList.toggle('active')
		if (isPopupActive) {
			hidePopup()
		}
		if (
			chatBotContainer.classList.contains('active') &&
			currentState === 'greeting'
		) {
			displayMessage(
				'–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –º–∞–≥–∞–∑–∏–Ω—É LVShop. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å? üòä',
				'bot'
			)
			displayOptions([
				{ text: '–ù–∞–π—Ç–∏ —Ç–æ–≤–∞—Ä', action: 'search' },
				{ text: '–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑', action: 'order' },
				{ text: '–ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤', action: 'history' },
			])
		}
	})

	closeButton.addEventListener('click', () => {
		chatBotContainer.classList.remove('active')
		resetChat()
	})

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
	sendButton.addEventListener('click', handleUserInput)
	chatInput.addEventListener('keypress', e => {
		if (e.key === 'Enter') handleUserInput()
	})

	// –°–∫—Ä—ã—Ç—å –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –ª—é–±–æ–º –≤–≤–æ–¥–µ
	chatInput.addEventListener('input', () => {
		if (isPopupActive) {
			hidePopup()
		}
	})

	function handleUserInput() {
		const userMessage = chatInput.value.trim()
		if (!userMessage) return

		displayMessage(userMessage, 'user')
		chatInput.value = ''
		processUserInput(userMessage)
	}

	// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
	function displayMessage(message, sender) {
		const messageElement = document.createElement('div')
		messageElement.className = `chatbot-message ${sender}`
		messageElement.innerHTML = `<p>${message}</p>`
		chatMessages.appendChild(messageElement)
		chatMessages.scrollTop = chatMessages.scrollHeight
	}

	// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–ø—Ü–∏–π –≤—ã–±–æ—Ä–∞
	function displayOptions(options) {
		const optionsContainer = document.createElement('div')
		optionsContainer.className = 'chatbot-options'
		options.forEach(option => {
			const button = document.createElement('button')
			button.textContent = option.text
			button.addEventListener('click', () => {
				displayMessage(option.text, 'user')
				processUserInput(option.action)
			})
			optionsContainer.appendChild(button)
		})
		chatMessages.appendChild(optionsContainer)
		chatMessages.scrollTop = chatMessages.scrollHeight
	}

	// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
	function displayProductImage(imageUrl) {
		const imageElement = document.createElement('div')
		imageElement.className = 'chatbot-message bot product-image'
		imageElement.innerHTML = `<img src="${imageUrl}" alt="Product Image" style="max-width: 100%; border-radius: 8px;" />`
		chatMessages.appendChild(imageElement)
		chatMessages.scrollTop = chatMessages.scrollHeight
	}

	// –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è —á–∞—Ç-–±–æ—Ç–∞
	function resetChat() {
		currentState = 'greeting'
		selectedProductId = null
		orderDetails = {}
		chatMessages.innerHTML = ''
	}

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	function processUserInput(input) {
		const normalizedInput = input.toLowerCase()

		switch (currentState) {
			case 'greeting':
				handleGreetingState(normalizedInput)
				break
			case 'search':
				handleSearchState(normalizedInput)
				break
			case 'search_results':
				handleSearchResultsState(normalizedInput)
				break
			case 'order':
				handleOrderState(normalizedInput)
				break
			case 'order_quantity':
				handleOrderQuantityState(normalizedInput)
				break
			case 'order_size':
				handleOrderSizeState(normalizedInput)
				break
			case 'order_delivery':
				handleOrderDeliveryState(normalizedInput)
				break
			case 'order_address':
				handleOrderAddressState(normalizedInput)
				break
			case 'order_card_number':
				handleOrderCardNumberState(normalizedInput)
				break
			case 'order_card_expiry':
				handleOrderCardExpiryState(normalizedInput)
				break
			case 'order_card_cvv':
				handleOrderCardCvvState(normalizedInput)
				break
			case 'history':
				handleHistoryState(normalizedInput)
				break
			default:
				displayMessage(
					'–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –ø–æ–Ω—è–ª –≤–∞—à –∑–∞–ø—Ä–æ—Å. –î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º —Å–Ω–∞—á–∞–ª–∞?',
					'bot'
				)
				displayOptions([
					{ text: '–ù–∞–π—Ç–∏ —Ç–æ–≤–∞—Ä', action: 'search' },
					{ text: '–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑', action: 'order' },
					{ text: '–ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤', action: 'history' },
				])
				currentState = 'greeting'
		}
	}

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
	function handleGreetingState(input) {
		if (
			input.includes('–Ω–∞–π—Ç–∏') ||
			input.includes('–ø–æ–∏—Å–∫') ||
			input === 'search'
		) {
			currentState = 'search'
			displayMessage(
				'–ö–∞–∫–æ–π —Ç–æ–≤–∞—Ä –≤—ã –∏—â–µ—Ç–µ? –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é.',
				'bot'
			)
		} else if (
			input.includes('–∑–∞–∫–∞–∑') ||
			input.includes('–æ—Ñ–æ—Ä–º–∏—Ç—å') ||
			input === 'order'
		) {
			currentState = 'order'
			displayMessage('–í–≤–µ–¥–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –∑–∞–∫–∞–∑–∞.', 'bot')
		} else if (
			input.includes('–∏—Å—Ç–æ—Ä–∏—è') ||
			input.includes('–∑–∞–∫–∞–∑—ã') ||
			input === 'history'
		) {
			currentState = 'history'
			fetchOrderHistory()
		} else {
			displayMessage('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –æ–ø—Ü–∏–π:', 'bot')
			displayOptions([
				{ text: '–ù–∞–π—Ç–∏ —Ç–æ–≤–∞—Ä', action: 'search' },
				{ text: '–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑', action: 'order' },
				{ text: '–ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤', action: 'history' },
			])
		}
	}

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤
	function handleSearchState(searchTerm) {
		fetch(`/api/products`)
			.then(response => response.json())
			.then(products => {
				const normalizedSearchTerm = searchTerm
					.toLowerCase()
					.replace(/[^–∞-—èa-z0-9\s]/g, '')

				// –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å–∏–Ω–æ–Ω–∏–º—ã –¥–ª—è –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ —Ç–µ—Ä–º–∏–Ω–∞
				let searchTerms = [normalizedSearchTerm]
				for (const [key, value] of Object.entries(synonyms)) {
					if (value.includes(normalizedSearchTerm)) {
						searchTerms = value
						break
					}
				}

				const filteredProducts = products.filter(product => {
					const name = product.–Ω–∞–∑–≤–∞–Ω–∏–µ
						.toLowerCase()
						.replace(/[^–∞-—èa-z0-9\s]/g, '')
					const description = product.–æ–ø–∏—Å–∞–Ω–∏–µ
						? product.–æ–ø–∏—Å–∞–Ω–∏–µ.toLowerCase().replace(/[^–∞-—èa-z0-9\s]/g, '')
						: ''
					// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Ö–æ—Ç—è –±—ã —Å –æ–¥–Ω–∏–º –∏–∑ —Å–∏–Ω–æ–Ω–∏–º–æ–≤
					return searchTerms.some(
						term => name.includes(term) || description.includes(term)
					)
				})

				if (filteredProducts.length === 0) {
					displayMessage(
						'–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å?',
						'bot'
					)
					displayOptions([
						{ text: '–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞', action: 'search' },
						{ text: '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é', action: 'greeting' },
					])
					currentState = 'greeting'
					return
				}

				displayMessage(`–ù–∞–π–¥–µ–Ω–æ ${filteredProducts.length} —Ç–æ–≤–∞—Ä(–æ–≤):`, 'bot')
				filteredProducts.forEach(product => {
					displayMessage(
						`${product.–Ω–∞–∑–≤–∞–Ω–∏–µ} - ‚ÇΩ${product.—Ü–µ–Ω–∞.toLocaleString(
							'ru-RU'
						)} (–ê—Ä—Ç–∏–∫—É–ª: ${product.id}, –†–∞–∑–º–µ—Ä—ã: ${
							product.—Ä–∞–∑–º–µ—Ä || '–ù–µ —É–∫–∞–∑–∞–Ω—ã'
						})`,
						'bot'
					)
					if (product.–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ) {
						displayProductImage(product.–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ)
					}
				})

				displayMessage(
					'–í–≤–µ–¥–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π –∏–ª–∏ "–Ω–∞–∑–∞–¥" –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞.',
					'bot'
				)
				currentState = 'search_results'
			})
			.catch(error => {
				console.error('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞:', error)
				displayMessage(
					'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ç–æ–≤–∞—Ä–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞?',
					'bot'
				)
				currentState = 'greeting'
			})
	}

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–æ–≤–∞—Ä–∞ –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
	function handleSearchResultsState(input) {
		if (input === '–Ω–∞–∑–∞–¥' || input === 'back') {
			currentState = 'greeting'
			displayMessage('–ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?', 'bot')
			displayOptions([
				{ text: '–ù–∞–π—Ç–∏ —Ç–æ–≤–∞—Ä', action: 'search' },
				{ text: '–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑', action: 'order' },
				{ text: '–ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤', action: 'history' },
			])
			return
		}

		const productId = parseInt(input)
		if (isNaN(productId) || productId <= 0) {
			displayMessage('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞.', 'bot')
			return
		}

		fetch(`/api/chatbot/product/${productId}`)
			.then(response => {
				if (!response.ok) throw new Error('–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω')
				return response.json()
			})
			.then(product => {
				displayMessage(
					`–¢–æ–≤–∞—Ä: ${product.–Ω–∞–∑–≤–∞–Ω–∏–µ}\n–¶–µ–Ω–∞: ‚ÇΩ${product.—Ü–µ–Ω–∞.toLocaleString(
						'ru-RU'
					)}\n–û–ø–∏—Å–∞–Ω–∏–µ: ${product.–æ–ø–∏—Å–∞–Ω–∏–µ || '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'}\n–†–∞–∑–º–µ—Ä—ã: ${
						product.—Ä–∞–∑–º–µ—Ä || '–ù–µ —É–∫–∞–∑–∞–Ω—ã'
					}`,
					'bot'
				)
				if (product.–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ) {
					displayProductImage(product.–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ)
				}
				displayOptions([
					{ text: '–ó–∞–∫–∞–∑–∞—Ç—å —ç—Ç–æ—Ç —Ç–æ–≤–∞—Ä', action: `order_${product.id}` },
					{ text: '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–∏—Å–∫', action: 'search' },
					{ text: '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é', action: 'greeting' },
				])
				currentState = 'greeting'
			})
			.catch(error => {
				console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞:', error)
				displayMessage(
					'–¢–æ–≤–∞—Ä —Å —Ç–∞–∫–∏–º –∞—Ä—Ç–∏–∫—É–ª–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∞—Ä—Ç–∏–∫—É–ª.',
					'bot'
				)
			})
	}

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
	function handleOrderState(input) {
		const productId = parseInt(input)
		if (isNaN(productId) || productId <= 0) {
			displayMessage('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞.', 'bot')
			return
		}

		fetch(`/api/chatbot/product/${productId}`)
			.then(response => {
				if (!response.ok) throw new Error(`HTTP –æ—à–∏–±–∫–∞: ${response.status}`)
				return response.json()
			})
			.then(product => {
				selectedProductId = productId
				orderDetails.product = product
				displayMessage(
					`–í—ã –≤—ã–±—Ä–∞–ª–∏: ${
						product.–Ω–∞–∑–≤–∞–Ω–∏–µ
					}\n–¶–µ–Ω–∞: ‚ÇΩ${product.—Ü–µ–Ω–∞.toLocaleString(
						'ru-RU'
					)}\n–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ.`,
					'bot'
				)
				currentState = 'order_quantity'
			})
			.catch(error => {
				console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞:', error)
				displayMessage(
					'–¢–æ–≤–∞—Ä —Å —Ç–∞–∫–∏–º –∞—Ä—Ç–∏–∫—É–ª–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∞—Ä—Ç–∏–∫—É–ª.',
					'bot'
				)
			})
	}

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞
	function handleOrderQuantityState(input) {
		const quantity = parseInt(input)
		if (isNaN(quantity) || quantity <= 0) {
			displayMessage('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ.', 'bot')
			return
		}

		fetch(`/api/chatbot/product/${selectedProductId}`)
			.then(response => response.json())
			.then(product => {
				if (quantity > product.–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ) {
					displayMessage(
						`–î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ ${product.–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ} —à—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –º–µ–Ω—å—à–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ.`,
						'bot'
					)
					return
				}

				orderDetails.quantity = quantity
				if (product.—Ä–∞–∑–º–µ—Ä && product.—Ä–∞–∑–º–µ—Ä.trim() !== '') {
					const sizes = product.—Ä–∞–∑–º–µ—Ä.includes(',')
						? product.—Ä–∞–∑–º–µ—Ä.split(',')
						: [product.—Ä–∞–∑–º–µ—Ä]
					displayMessage(
						`–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã: ${sizes.join(', ')}\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–º–µ—Ä.`,
						'bot'
					)
					currentState = 'order_size'
				} else {
					orderDetails.size = '–ù–µ —É–∫–∞–∑–∞–Ω'
					displayMessage(
						'–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏: –ö—É—Ä—å–µ—Ä, –°–∞–º–æ–≤—ã–≤–æ–∑, –ü–æ—á—Ç–∞.',
						'bot'
					)
					currentState = 'order_delivery'
				}
			})
			.catch(error => {
				console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞:', error)
				displayMessage('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.', 'bot')
				currentState = 'order'
			})
	}

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–∞–∑–º–µ—Ä–∞
	function handleOrderSizeState(input) {
		const product = orderDetails.product
		const sizes =
			product.—Ä–∞–∑–º–µ—Ä && product.—Ä–∞–∑–º–µ—Ä.trim() !== ''
				? product.—Ä–∞–∑–º–µ—Ä.includes(',')
					? product.—Ä–∞–∑–º–µ—Ä.split(',').map(s => s.trim().toLowerCase())
					: [product.—Ä–∞–∑–º–µ—Ä.trim().toLowerCase()]
				: ['–Ω–µ —É–∫–∞–∑–∞–Ω']

		const normalizedInput = input.trim().toLowerCase()
		if (!sizes.includes(normalizedInput)) {
			displayMessage(
				`–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–∞–∑–º–µ—Ä–æ–≤: ${sizes.join(', ')}`,
				'bot'
			)
			return
		}

		orderDetails.size = input.trim()
		displayMessage('–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏: –ö—É—Ä—å–µ—Ä, –°–∞–º–æ–≤—ã–≤–æ–∑, –ü–æ—á—Ç–∞.', 'bot')
		currentState = 'order_delivery'
	}

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–æ—Å–æ–±–∞ –¥–æ—Å—Ç–∞–≤–∫–∏
	function handleOrderDeliveryState(input) {
		const validMethods = ['–∫—É—Ä—å–µ—Ä', '—Å–∞–º–æ–≤—ã–≤–æ–∑', '–ø–æ—á—Ç–∞']
		if (!validMethods.includes(input.toLowerCase())) {
			displayMessage(
				'–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ: –ö—É—Ä—å–µ—Ä, –°–∞–º–æ–≤—ã–≤–æ–∑ –∏–ª–∏ –ü–æ—á—Ç–∞.',
				'bot'
			)
			return
		}

		orderDetails.deliveryMethod = input.toLowerCase()
		if (orderDetails.deliveryMethod === '—Å–∞–º–æ–≤—ã–≤–æ–∑') {
			orderDetails.address = '–≥. –ú–æ—Å–∫–≤–∞, —É–ª. –ü—Ä–∏–º–µ—Ä–Ω–∞—è, –¥. 123'
			displayMessage(`–ê–¥—Ä–µ—Å –¥–ª—è —Å–∞–º–æ–≤—ã–≤–æ–∑–∞: ${orderDetails.address}`, 'bot')
			displayMessage(
				'–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã (16 —Ü–∏—Ñ—Ä, –Ω–∞–ø—Ä–∏–º–µ—Ä, 1234 5678 9012 3456).',
				'bot'
			)
			currentState = 'order_card_number'
		} else {
			displayMessage('–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏.', 'bot')
			currentState = 'order_address'
		}
	}

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–¥—Ä–µ—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏
	function handleOrderAddressState(input) {
		if (input.trim().length < 5) {
			displayMessage('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏.', 'bot')
			return
		}

		orderDetails.address = input.trim()
		displayMessage(
			'–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã (16 —Ü–∏—Ñ—Ä, –Ω–∞–ø—Ä–∏–º–µ—Ä, 1234 5678 9012 3456).',
			'bot'
		)
		currentState = 'order_card_number'
	}

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–º–µ—Ä–∞ –∫–∞—Ä—Ç—ã
	function handleOrderCardNumberState(input) {
		const cardNumber = input.replace(/\s/g, '')
		if (!/^\d{16}$/.test(cardNumber)) {
			displayMessage(
				'–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã (16 —Ü–∏—Ñ—Ä).',
				'bot'
			)
			return
		}

		orderDetails.cardNumber = cardNumber
		displayMessage(
			'–í–≤–µ–¥–∏—Ç–µ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∫–∞—Ä—Ç—ã (–ú–ú/–ì–ì, –Ω–∞–ø—Ä–∏–º–µ—Ä, 12/25).',
			'bot'
		)
		currentState = 'order_card_expiry'
	}

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è –∫–∞—Ä—Ç—ã
	function handleOrderCardExpiryState(input) {
		const expiry = input.trim()
		if (!/^(0[1-9]|1[0-2])\/[0-9]{2}$/.test(expiry)) {
			displayMessage(
				'–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è (–ú–ú/–ì–ì, –Ω–∞–ø—Ä–∏–º–µ—Ä, 12/25).',
				'bot'
			)
			return
		}

		const [month, year] = expiry.split('/')
		const currentYear = new Date().getFullYear() % 100
		const currentMonth = new Date().getMonth() + 1
		const inputYear = parseInt(year)
		const inputMonth = parseInt(month)

		if (
			inputYear < currentYear ||
			(inputYear === currentYear && inputMonth < currentMonth)
		) {
			displayMessage('–ö–∞—Ä—Ç–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–∞. –í–≤–µ–¥–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Å—Ä–æ–∫.', 'bot')
			return
		}

		orderDetails.cardExpiry = expiry
		displayMessage('–í–≤–µ–¥–∏—Ç–µ CVV-–∫–æ–¥ (3 —Ü–∏—Ñ—Ä—ã –Ω–∞ –æ–±–æ—Ä–æ—Ç–µ –∫–∞—Ä—Ç—ã).', 'bot')
		currentState = 'order_card_cvv'
	}

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ CVV-–∫–æ–¥–∞
	function handleOrderCardCvvState(input) {
		const cvv = input.trim()
		if (!/^\d{3}$/.test(cvv)) {
			displayMessage('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π CVV-–∫–æ–¥ (3 —Ü–∏—Ñ—Ä—ã).', 'bot')
			return
		}

		orderDetails.cardCvv = cvv
		placeOrder()
	}

	// –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
	function placeOrder() {
		const cartItems = [
			{
				id: selectedProductId,
				price: orderDetails.product.—Ü–µ–Ω–∞,
				quantity: orderDetails.quantity,
				size: orderDetails.size,
			},
		]

		fetch('/checkout', {
			method: 'POST',
			headers: {
				'Content-Type': 'application/json',
			},
			body: JSON.stringify({
				address: orderDetails.address,
				deliveryMethod: orderDetails.deliveryMethod,
				cartItems: cartItems,
				paymentDetails: {
					cardNumber: orderDetails.cardNumber,
					cardExpiry: orderDetails.cardExpiry,
					cardCvv: orderDetails.cardCvv,
				},
			}),
		})
			.then(response => {
				if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞')
				return response.json()
			})
			.then(data => {
				resetChat()
				displayMessage(
					'–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω! –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: ' + data.orderId,
					'bot'
				)
				displayOptions([
					{ text: '–ù–æ–≤—ã–π –∑–∞–∫–∞–∑', action: 'order' },
					{ text: '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é', action: 'greeting' },
				])
			})
			.catch(error => {
				console.error('–û—à–∏–±–∫–∞:', error)
				displayMessage('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.', 'bot')
				currentState = 'order'
			})
	}

	// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–∫–∞–∑–æ–≤
	function fetchOrderHistory() {
		fetch('/api/user-orders')
			.then(response => {
				if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–∫–∞–∑–æ–≤')
				return response.json()
			})
			.then(orders => {
				if (orders.length === 0) {
					displayMessage('–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.', 'bot')
				} else {
					displayMessage('–í–∞—à–∏ –∑–∞–∫–∞–∑—ã:', 'bot')
					orders.forEach(order => {
						const formattedDate = new Date(
							order.–¥–∞—Ç–∞_—Å–æ–∑–¥–∞–Ω–∏—è
						).toLocaleDateString('ru-RU')
						displayMessage(
							`–ó–∞–∫–∞–∑ #${
								order.id
							} –æ—Ç ${formattedDate}\n–°—É–º–º–∞: ‚ÇΩ${order.—Å—É–º–º–∞.toLocaleString(
								'ru-RU'
							)}\n–°—Ç–∞—Ç—É—Å: ${order.—Å—Ç–∞—Ç—É—Å}`,
							'bot'
						)
					})
				}
				displayOptions([
					{ text: '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é', action: 'greeting' },
					{ text: '–ù–∞–π—Ç–∏ —Ç–æ–≤–∞—Ä', action: 'search' },
				])
				currentState = 'greeting'
			})
			.catch(error => {
				console.error('–û—à–∏–±–∫–∞:', error)
				displayMessage(
					'–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–∫–∞–∑–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞?',
					'bot'
				)
				displayOptions([
					{ text: '–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞', action: 'history' },
					{ text: '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é', action: 'greeting' },
				])
			})
	}

	// –ó–∞–ø—É—Å–∫ –≤—Å–ø–ª—ã–≤–∞—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
	showPopup()
})
